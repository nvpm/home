  tab meta
    buff menu : meta/menu.vim
    buff conf : meta/conf.vim
    buff init : meta/init.vim
  tab root
    buff read : README.md
    buff lice : license

  let root = get(a:,1,g:nvpm.tree.root)
  let list = get(root,'list',[])

  if empty(root)|return 1|endif
  if empty(list)|return 2|endif

  let node = nvpm#seek(3,'node',root)
                                     
  call nvpm#show(node)
  return root
  if empty(node)
    let newtype = 3
    let list = []
    for node in root.list
      let keyw = node.data.keyw
      let type = flux#find(g:nvpm.conf.node,keyw)
      if type<newtype|let newtype=type|break|endif
      call remove(root.list,0)
      call add(list,node)
    endfor
    let node = {}
    let node.meta = deepcopy(root.meta)
    let node.meta.leng = len(list)
    let node.meta.type = 3
    let node.meta.depth+=1 
    let node.data = deepcopy(root.list[0].data)
    let node.data.name = '<No Name>'
    let node.data.info = ''
    let node.list = list
    let root.list = [node]+root.list
    let root.meta.leng = len(root.list)
  endif

  return root





















syn match  fluxpath  /\s*:\s*\(\~*\/*\.*\-*\w*\s*\w*\)*\/*\w*\.*\w*\s*$/
  ---

fu! menu#push(...) "{

  let root = get(a:000,0,'.')
  let repo = [root,"nvpm/devl"][root=='.']

  if !menu#save(root)|return|endif

  let user  = "nvpm"
  let tfile = "/iasj/cryp/github"
  let token = "/iasj/cryp/github.gpg"
  if filereadable(tfile)|call delete(tfile)|endif
  let exec = 'gpg -q --no-symkey-cache --batch --passphrase '

  echo repeat('-',&columns)
  echo 'Pushing main -> '..repo

  let pass = inputsecret('type the passphrase: ')
  if empty(pass)|return|endif
  call system(exec.pass.' '.token)
  if v:shell_error
    echohl NVPMFailed
    echo "\nWrong passphrase"
    echohl None
    return
  endif
  if filereadable(tfile)
    let token = readfile(tfile)[0]
    call delete(tfile)

    let url = "https://gitlab-cli-token:".token
    let url.= "@gitlab.com/"..repo
    let flag = '--force '.url.' main --tags'
    ec "\n"
    ec repeat('-',&columns)
    echohl NVPMPassed
    ec system('git -C '..root..' push '.flag)
    echohl None
    ec repeat('-',&columns)
    "call execute(':term git push '.flag)
    "call execute(':startinsert')
  endif
endfu "}





















      let s:data[node.type] = #{indx:0,data:[]}
      for item in node.list
        let data = item.data
        unlet data.keyw
        call add(s:data[node.type].data,data)
      endfor

" nvpm: help functions
fu! nvpm#curr(...) " gets the current leaf node {

  let curr = tree#curr(s:tree,s:conf)
  let file = get(curr,'info','')

  if empty(curr)||empty(file)|return 1|endif

  let head = fnamemodify(file,':h')
  let HEAD = fnamemodify(head,':p')

  "call execute($'edit {file}')

  " fixes syntax for nvpm projfiles
  if head==s:dirs.local || HEAD==s:dirs.global && &ft != 'nvpm'
    let &ft = 'nvpm'
  endif

  " TODO: remove this return
  return

  " maketree functionality
  " TODO:
  "   - add help files identification & handling (I mean ignoring)
  if get(g:,'nvpm_maketree',0)&&
    \!empty(head)&&
    \!filereadable(head)&&
    \-1==match(file,'term\:\/\/')
    call mkdir(head,'p')
  endif

endfu "}
fu! nvpm#list(...) " gets the current lists of each type {

  let s:tree.names = {}

  for type in s:tree.types
    let s:tree.names[type] = tree#list(s:tree,type)
  endfor

endfu "}
" nvpm: help functions

      if leafnode && !node.absl
        let info = empty(node.data.info)?node.data.name:node.data.info
        let node.data.info = home..info
" auto/file.vim
" once {

if !NVPMTEST&&exists('NVPMFILEAUTO')|finish|else|let NVPMFILEAUTO=1|endif

" end-once}
" func {

fu! file#file(...) "{
  let file = {}

  let file.read = function('file#read')
  let file.save = function('file#save')
  let file.eval = function('file#eval')

  if exists("a:1")|call file.read(a:1)|endif

  return file
endfu "}
fu! file#read(...) dict "{

  if !empty(a:000)
    if type(a:1) == type('')
      let self.path = a:1
      if filereadable(self.path)
        let self.type = "file"
        let self.body = readfile(self.path)
        let self.leng = len(self.body)
      elseif isdirectory(self.path)
        let self.type = "directory"
        let self.body = readdir(self.path)
        let self.leng = len(self.body)
      else
        let self.type = "none"
        let self.body = []
        let self.leng = 0
      endif
    elseif !empty(a:1) && type(a:1) == type([])
      call self.read(a:1[0])
    endif
  endif

endfu "}
fu! file#eval(...) dict "{
  try
    let self.body = eval(join(self.body,''))
    let self.type = "eval"
  endtry
endfu "}
fu! file#save(...) dict "{
endfu "}

" }

              ╭───────────────╮
              │ file main.c   │    ╭─────────────────────────────╮ 
              │               │ == │ file main.c , file Makefile │ 
              │ file Makefile │    ╰─────────────────────────────╯ 
              ╰───────────────╯                  │
                                                 ╰─── comma here


- ╭─────────────────────────────────╮
- │                2     3     4    │
- │              .-●-----●-----●    │
- │          1  /        3     4    │
- │      .---●-·       .-●-----●    │
- │     /       \  2  /             │
- │    0         --●-.              |
- │     \             \  3     4    │
- │      \             --●-----●    │
- │       \                         │
- │        --●-----●-----●-----●    │
- │          1     2     3     4    │
- ├─────────────────────────────────┤
- │ 0: root    nodes                │
- │ 1: depth 1 nodes                │
- │     ...                         │
- │ 4: leaf    nodes                │
- ╰─────────────────────────────────╯
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
╭──────╮
│      │
│      │
╰──────╯
 ✅✅✅✅✅✅✅✅✅
─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═
║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰
