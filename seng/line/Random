fu! line#geth(...) "{

  let group = a:1
  let field = get(a:,2,'no field')
  let args = {}
  if hlexists(group)
    let info = execute('hi '.group)
    let info = split(info,'\s\+')[2:]
    let info = map(info,'split(v:val,"=")')
    for arg in info
      if arg[0]==field|return arg[1]|endif
      let args[arg[0]] = arg[1]
    endfor
  endif
  return args

endfu "}
fu! line#seth(...) "{

  let data = get(a:,1,s:colors)

  for atom in keys(data)
    let name = 'line'.atom
    let atom = data[atom]
    if type(atom)==type([])&&!hlexists(name)
      let gbg = get(atom,0,'')|let gbg=['guibg='..  gbg,''][empty(gbg)]
      let gfg = get(atom,1,'')|let gfg=['guifg='..  gfg,''][empty(gfg)]
      let gui = get(atom,2,'')|let gui=['gui='  ..  gui,''][empty(gui)]
      let cbg = get(atom,3,'')|let cbg=['ctermbg='..cbg,''][empty(cbg)]
      let cfg = get(atom,4,'')|let cfg=['ctermfg='..cfg,''][empty(cfg)]
      let ctm = get(atom,5,'')|let ctm=['cterm='  ..ctm,''][empty(ctm)]
      let arg = gbg.' '.gfg.' '.gui.' '
      let arg.= cbg.' '.cfg.' '.ctm
      if !empty(arg)
        exe 'hi '..name..' '..arg
      endif
    elseif type(atom)==type({})
    endif
  endfor

endfu "}
fu! line#giti(...) "{
  let info  = ''
  if s:gitinfo && executable('git')
    let branch   = trim(system('git rev-parse --abbrev-ref HEAD'))
    if empty(branch)|return ''|endif
    let modified = !empty(trim(system('git diff HEAD --shortstat')))
    let staged   = !empty(trim(system('git diff --no-ext-diff --cached --shortstat')))
    let cr = ''
    let char = ''
    let s = ' '
    if empty(matchstr(branch,'fatal: not a git repository'))
      let cr   = '%#linegitc#'
      if modified
        let cr    = '%#linegitm#'
        let char  = ' [M]'
      endif
      if staged
        let cr   = '%#linegits#'
        let char = ' [S]'
      endif
      let info = cr .'  ' . branch . char
    endif
  endif
  let g:line.git = info
endfu "}


old meta/init.vim
  return
  "U+2500–U+257F   # Box Drawing
  "U+2580–U+259F   # Block Elements
  "U+1FB00–U+1FBFF # Legacy Computing (includes extended box drawing)

  for i in range(0x2500,0x257f)
    echon nr2char(i) . ' '
  endfor

  for i in range(0x2580,0x259f)
    echon nr2char(i) . ' '
  endfor

  for i in range(0x1FB00,0x1FBFF)
    echon nr2char(i) . ' '
  endfor

    return
    let file = 'char/char.gen'
    let body = []
    let line = ''
    let size = float2nr(pow(2,7))
    let shift= 0
    for n in range(10000)
      let init = (n+0)*size + shift
      let end  = (n+1)*size + shift
      call add(body,'{ '..init.' - '.end)
      call add(body,'')
      for i in range(init,end)
        let char = nr2char(i).. ' '
        if i%30==0
          call add(body,line)
          let line = ''
        elseif char=~'\p'
          let line.= char
        endif
      endfor
      call add(body,'')
      call add(body,'}')
    endfor
    call writefile(body,file)
    ec 'finished'

  return
  "fu! Showcterm()
  "  let term = &termguicolors
  "  set notermguicolors
  "  ec repeat("\n",3)
  "  for i in range(256)
  "    let name = 'nvpmtestcolor'.i
  "    exe 'hi '..name..' ctermbg='..i..' ctermfg='..(i%8==0||(i>=233&&i<=239)?255:8)
  "    exe 'echohl '..name
  "    echon ' '..i..' '
  "    "exe 'hi clear '..name
  "  endfor
  "  ec repeat("\n",2)
  "  let &termguicolors = term
  "endfu
  ""call Showcterm()|delfunc Showcterm
  "ec line#foot()
